// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// 기존 rds
// datasource db {
//   provider = "mysql"
//   url      = env("MYSQL_URL")
//   shadowDatabaseUrl = env("SHADOW_MYSQL_URL")
// }

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Provider {
  google
  naver
  kakao
}

model User {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3)
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3)

  email String        @db.VarChar(500)
  password String     @db.VarChar(255)
  name String         @db.VarChar(50)

  refreshToken String? @db.Text @map("refresh_token")
  provider Provider?
  providerId String?   @db.Text

  posts Post[]
  comments Comment[]
  postLikes PostLike[]
  views View[]

  @@map("user")
}

model Post {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3)
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3)

  title String    @db.VarChar(50)
  content String  @db.Text

  author  User  @relation(fields: [authorId], references: [id])
  authorId  Int @map("author_id") @db.UnsignedInt

  tags  PostTag[]
  comments Comment[]
  postLikes PostLike[]
  views View[]

  @@map("post")
}

model View {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3)
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3)

  post Post @relation(fields: [postId], references: [id])
  postId Int @map("post_id") @db.UnsignedInt

  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id") @db.UnsignedInt

  @@map("view")
}

model PostLike {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3)
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3)

  post Post @relation(fields: [postId], references: [id])
  postId Int @map("post_id") @db.UnsignedInt

  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id") @db.UnsignedInt

  @@index([postId, userId])
  @@map("post_like")
}

model Tag {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3) 
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3)

  name      String    @db.VarChar(30)

  posts PostTag[]

  @@map("tag")
}

model PostTag {
  post  Post  @relation(fields: [postId], references: [id])
  postId  Int @map("post_id") @db.UnsignedInt

  tag   Tag   @relation(fields: [tagId], references: [id])
  tagId   Int @map("tag_id") @db.UnsignedInt

  @@id([postId, tagId])

  @@map("post_tag")
}

model Comment {
  id  Int @default(autoincrement()) @id @db.UnsignedInt
  createdAt DateTime  @default(now()) @map("created_at")  @db.Timestamp(3) 
  updatedAt DateTime  @updatedAt  @map("updated_at")      @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at")                  @db.Timestamp(3) 

  content String @db.Text

  author User @relation(fields: [authorId], references: [id])
  authorId Int @map("author_id") @db.UnsignedInt

  post Post @relation(fields: [postId], references: [id])
  postId Int @map("post_id") @db.UnsignedInt

  @@map("comment")
}
